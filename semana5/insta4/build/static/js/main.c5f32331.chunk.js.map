{"version":3,"sources":["img/favorite-white.svg","img/favorite.svg","img/comment_icon.svg","components/IconeComContador/IconeComContador.js","components/SecaoComentario/SecaoComentario.js","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IconeComContador","props","className","alt","src","icone","onClick","onClickIcone","valorContador","SecaoComentario","state","valorInputComentario","onChangeComentario","event","console","log","target","value","setState","placeholder","this","onChange","aoEnviar","Component","Post","curtido","numeroCurtidas","comentando","numeroComentarios","onClickCurtida","novoNumeroCurtidas","onClickComentario","aoEnviarComentario","iconeCurtida","componenteComentario","iconeCoracaoPreto","iconeCoracaoBranco","fotoUsuario","nomeUsuario","fotoPost","iconeComentario","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,oQCGpC,SAASC,EAAiBC,GAChC,OAAO,yBAAKC,UAAW,kBACtB,yBAAKC,IAAK,QAASC,IAAKH,EAAMI,MAAOC,QAASL,EAAMM,eACpD,2BAAIN,EAAMO,gB,qDCHCC,G,MAAb,2MACCC,MAAQ,CACPC,qBAAsB,IAFxB,EAKCC,mBAAqB,SAACC,GACrBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAACP,qBAAsBE,EAAMG,OAAOC,SAPpD,wEAWE,OAAO,yBAAKf,UAAW,qBACtB,2BACCA,UAAW,mBACXiB,YAAa,gBACbF,MAAOG,KAAKV,MAAMC,qBAClBU,SAAUD,KAAKR,qBAEhB,4BAAQN,QAASc,KAAKnB,MAAMqB,UAA5B,eAlBH,GAAqCC,cCgGtBC,E,2MAxFXd,MAAQ,CACJe,SAAS,EACTC,eAAgB,EAChBC,YAAY,EACZC,kBAAmB,G,EAGvBC,eAAiB,WACb,IAAIC,EAGAA,EADA,EAAKpB,MAAMe,QACU,EAAKf,MAAMgB,eAAiB,EAE5B,EAAKhB,MAAMgB,eAAiB,EAGrD,EAAKR,SAAS,CACVO,SAAU,EAAKf,MAAMe,QACrBC,eAAgBI,K,EAIxBC,kBAAoB,WAChB,EAAKb,SAAS,CACVS,YAAa,EAAKjB,MAAMiB,c,EAIhCK,mBAAqB,WACjB,EAAKd,SAAS,CACVS,YAAY,EACZC,kBAAmB,EAAKlB,MAAMkB,kBAAoB,K,wEAKtD,IAAIK,EAQAC,EAOJ,OAZID,EADAb,KAAKV,MAAMe,QACIU,IAEAC,IAKfhB,KAAKV,MAAMiB,aACXO,EAAuB,kBAAE,EAAF,CAAkBZ,SAAaF,KAAKY,sBAIxD,yBAAK9B,UAAc,kBACtB,yBACIA,UAAc,eAClB,yBACIA,UAAc,aACtBE,IAAQgB,KAAKnB,MAAMoC,YACnBlC,IAAQ,sBALJ,IAMD,+BACGiB,KAAKnB,MAAMqC,YADd,KANC,KAUJ,yBACIpC,UAAc,aAClBE,IAAQgB,KAAKnB,MAAMsC,SACnBpC,IAAQ,mBAGR,yBACID,UAAc,eACd,kBACA,EADA,CAEJG,MAAU4B,EACV1B,aAAiBa,KAAKS,eACtBrB,cAAkBY,KAAKV,MAAMgB,iBAG7B,kBACA,EADA,CAEArB,MAAUmC,IACVjC,aAAiBa,KAAKW,kBACtBvB,cAAkBY,KAAKV,MAAMkB,oBAb7B,KAjBO,IAgCCM,EAhCD,S,GApDIO,IAAMlB,WCqBVmB,E,iLAzBX,OACE,yBAAKxC,UAAW,iBACd,kBAAC,EAAD,CACEoC,YAAa,WACbD,YAAa,uCACbE,SAAU,2CAGZ,kBAAC,EAAD,CACED,YAAa,UACbD,YAAa,uCACbE,SAAU,2CAGZ,kBAAC,EAAD,CACED,YAAa,QACbD,YAAa,uCACbE,SAAU,gD,GAnBFE,IAAMlB,WCQJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c5f32331.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favorite-white.042aa417.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite.4c67d875.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment_icon.de299b47.svg\";","import React from 'react'\nimport './IconeComContador.css'\n\nexport function IconeComContador(props) {\n\treturn <div className={'icon-container'}>\n\t\t<img alt={'Icone'} src={props.icone} onClick={props.onClickIcone}/>\n\t\t<p>{props.valorContador}</p>\n\t</div>\n}\n","import React, {Component} from 'react'\nimport './SecaoComentario.css'\n\nexport class SecaoComentario extends Component {\n\tstate = {\n\t\tvalorInputComentario: ''\n\t}\n\n\tonChangeComentario = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tthis.setState({valorInputComentario: event.target.value})\n\t}\n\n\trender() {\n\t\treturn <div className={'comment-container'}>\n\t\t\t<input\n\t\t\t\tclassName={'input-comentario'}\n\t\t\t\tplaceholder={'ComentÃ¡rio'}\n\t\t\t\tvalue={this.state.valorInputComentario}\n\t\t\t\tonChange={this.onChangeComentario}\n\t\t\t/>\n\t\t\t<button onClick={this.props.aoEnviar}>Enviar</button>\n\t\t</div>\n\t}\n}\n","import React from 'react'\nimport './Post.css'\n\nimport { IconeComContador } from '../IconeComContador/IconeComContador'\n\nimport iconeCoracaoBranco from '../../img/favorite-white.svg'\nimport iconeCoracaoPreto from '../../img/favorite.svg'\nimport iconeComentario from '../../img/comment_icon.svg'\nimport { SecaoComentario } from '../SecaoComentario/SecaoComentario'\n\nclass Post extends React.Component {\n    state = {\n        curtido: false,\n        numeroCurtidas: 0,\n        comentando: false,\n        numeroComentarios: 0\n    }\n\n    onClickCurtida = () => {\n        let novoNumeroCurtidas\n\n        if (this.state.curtido) {\n            novoNumeroCurtidas = this.state.numeroCurtidas - 1\n        } else {\n            novoNumeroCurtidas = this.state.numeroCurtidas + 1\n        }\n\n        this.setState({\n            curtido: !this.state.curtido,\n            numeroCurtidas: novoNumeroCurtidas\n        })\n    }\n\n    onClickComentario = () => {\n        this.setState({\n            comentando: !this.state.comentando\n        })\n    }\n\n    aoEnviarComentario = () => {\n        this.setState({\n            comentando: false,\n            numeroComentarios: this.state.numeroComentarios + 1\n        })\n    }\n\n    render() {\n        let iconeCurtida\n\n        if (this.state.curtido) {\n            iconeCurtida = iconeCoracaoPreto\n        } else {\n            iconeCurtida = iconeCoracaoBranco\n        }\n\n        let componenteComentario\n\n        if (this.state.comentando) {\n            componenteComentario = < SecaoComentario aoEnviar = { this.aoEnviarComentario }\n            />\n        }\n\n        return <div className = { 'post-container' } >\n            <\n            div className = { 'post-header' } >\n            <\n            img className = { 'user-photo' }\n        src = { this.props.fotoUsuario }\n        alt = { 'Imagem do usuario' }\n        /> <\n        p > { this.props.nomeUsuario } < /p> <\n            /div>\n\n        <\n        img className = { 'post-photo' }\n        src = { this.props.fotoPost }\n        alt = { 'Imagem do post' }\n        />\n\n        <\n        div className = { 'post-footer' } >\n            <\n            IconeComContador\n        icone = { iconeCurtida }\n        onClickIcone = { this.onClickCurtida }\n        valorContador = { this.state.numeroCurtidas }\n        />\n\n        <\n        IconeComContador\n        icone = { iconeComentario }\n        onClickIcone = { this.onClickComentario }\n        valorContador = { this.state.numeroComentarios }\n        /> <\n        /div> { componenteComentario } <\n        /div>\n    }\n}\n\nexport default Post","import React from 'react';\nimport './App.css';\nimport Post from './components/Post/Post';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className={'app-container'}>\n        <Post\n          nomeUsuario={'paulinha'}\n          fotoUsuario={'https://picsum.photos/50/50?random=1'}\n          fotoPost={'https://picsum.photos/200/150?random=1'}\n        />\n\n        <Post\n          nomeUsuario={'mariana'}\n          fotoUsuario={'https://picsum.photos/50/50?random=2'}\n          fotoPost={'https://picsum.photos/200/150?random=2'}\n        />\n\n        <Post\n          nomeUsuario={'Paulo'}\n          fotoUsuario={'https://picsum.photos/50/50?random=3'}\n          fotoPost={'https://picsum.photos/200/150?random=3'}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}