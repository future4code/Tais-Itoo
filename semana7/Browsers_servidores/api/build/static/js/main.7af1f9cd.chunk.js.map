{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","pokeList","pokeImage","pokeImageBack","pokeSpecies","pokeTypes","componentDidMount","axios","get","then","response","setState","data","results","catch","err","console","log","pegaPokemon","event","pokeName","target","value","sprites","front_default","back_default","species","name","weight","image","this","src","alt","imagem","types","className","onChange","map","pokemon","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qRAsFeA,E,4MAjFXC,MAAQ,CACJC,SAAU,GACVC,UAAW,GACXC,cAAe,GACfC,YAAa,GACbC,UAAW,I,EAGfC,kBAAoB,WAChBC,IAAMC,IAAI,gDACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAAEV,SAAUS,EAASE,KAAKC,aACzCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,O,EAIxBG,YAAc,SAAAC,GACV,IAAMC,EAAWD,EAAME,OAAOC,MAC9Bf,IACKC,IADL,4CAC8CY,IACzCX,MAAK,SAAAC,GACF,EAAKC,SAAS,CAAET,UAAWQ,EAASE,KAAKW,QAAQC,gBACjD,EAAKb,SAAS,CAAER,cAAeO,EAASE,KAAKW,QAAQE,eACrD,EAAKd,SAAS,CAAEP,YAAaM,EAASE,KAAKc,QAAQC,OACnD,EAAKhB,SAAS,CAAEN,UAAWK,EAASE,KAAKgB,YAE5Cd,OAAM,SAAAC,GACHC,QAAQC,IAAIF,O,uDAOpB,IAAMc,EAAQC,KAAK9B,MAAME,UACrB,yBAAK6B,IAAKD,KAAK9B,MAAME,UAAW8B,IAAI,YAEhC,8BAGFC,EAASH,KAAK9B,MAAMG,cACtB,yBAAK4B,IAAKD,KAAK9B,MAAMG,cAAe6B,IAAI,iBAEpC,8BAGFN,EAAUI,KAAK9B,MAAMI,YACvB,4BAAI,+CAAkB0B,KAAK9B,MAAMI,cAE7B,8BAGF8B,EAAQJ,KAAK9B,MAAMK,UACrB,4BAAI,yCAAeyB,KAAK9B,MAAMK,YAE1B,8BAGR,OACI,yBAAK8B,UAAU,OACX,4BAAQC,SAAUN,KAAKZ,aACnB,4BAAQI,MAAO,IAAf,UACCQ,KAAK9B,MAAMC,SAASoC,KAAI,SAAAC,GACrB,OAAO,4BAAQC,IAAKD,EAAQX,KAAML,MAAOgB,EAAQX,MAAOW,EAAQX,UAGxE,6BACKD,EACAQ,EACAL,EACAI,Q,GAxEHO,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.7af1f9cd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\n\nclass App extends React.Component {\n    state = {\n        pokeList: [],\n        pokeImage: \"\",\n        pokeImageBack: \"\",\n        pokeSpecies: \"\",\n        pokeTypes: \"\"\n    };\n\n    componentDidMount = () => {\n        axios.get(\"https://pokeapi.co/api/v2/pokemon/?limit=151\")\n            .then(response => {\n                this.setState({ pokeList: response.data.results })\n            }).catch(err => {\n                console.log(err);\n            });\n    };\n\n    pegaPokemon = event => {\n        const pokeName = event.target.value;\n        axios\n            .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\n            .then(response => {\n                this.setState({ pokeImage: response.data.sprites.front_default });\n                this.setState({ pokeImageBack: response.data.sprites.back_default });\n                this.setState({ pokeSpecies: response.data.species.name });\n                this.setState({ pokeTypes: response.data.weight });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        ;\n    }\n\n\n    render() {\n        const image = this.state.pokeImage ? (\n            <img src={this.state.pokeImage} alt=\"pokemon\" />\n        ) : (\n                <div />\n            );\n\n        const imagem = this.state.pokeImageBack ? (\n            <img src={this.state.pokeImageBack} alt=\"pokemon Back\" />\n        ) : (\n                <div />\n            );\n\n        const species = this.state.pokeSpecies ? (\n            <h2><strong>Esp√©cie: {this.state.pokeSpecies}</strong></h2>\n        ) : (\n                <div />\n            );\n\n        const types = this.state.pokeTypes ? (\n            <h3><strong>Peso: {this.state.pokeTypes}</strong></h3>\n        ) : (\n                <div />\n            );\n\n        return (\n            <div className=\"App\">\n                <select onChange={this.pegaPokemon}>\n                    <option value={\"\"}>Nenhum</option>\n                    {this.state.pokeList.map(pokemon => {\n                        return <option key={pokemon.name} value={pokemon.name}>{pokemon.name}</option>\n                    })}\n                </select>\n                <div>\n                    {species}\n                    {types}\n                    {image}\n                    {imagem}\n\n\n                </div>\n\n            </div>\n        )\n    };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}